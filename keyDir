#!/usr/bin/env python3

import os
import argparse
import re
import configparser
import sys , tty , termios
import subprocess
import os.path

import niceMenu
import niceParse

# FUNCTIONS TO PARSE RPN EXPRESSION

def plusFun(funs):
    def newfun(keys):
        score_p = 0
        score_n = 0
        ok = False
        for f in funs:
            r = f(keys)
            if(r >= 0):
                score_p = score_p + r
                ok = True
            else:
                score_n  = score_n + r
        if(ok):
            return score_p
        else:
            return score_n
    return newfun

def timesFun(funs):
    def newfun(keys):
        score_p = 1
        score_n = 1
        ok = True
        for f in funs:
            r = f(keys)
            if(r >= 0):
                score_p = score_p * r
            else:
                score_n = score_n * (-r)
                ok = False
        if(ok):
            return score_p
        else:
            return -score_n
    return newfun

def notFun(fun):
    def newfun(keys):
        score = -1 * fun(keys)
        return score
    return newfun

def isIn(key):
    if(not key in keyDirGlobal.keys):
        raise ValueError("Key " + key + " not recognized.")
    def newfun(keys):
        ok = False
        for k in keys:
            if(k == key):
                ok = True
        if(ok):
            return 1
        else:
            return -1
    return newfun

#def parseRPN(expr):
#    """
#    RPN expression -expr- will be parsed into a function
#    that acts in on a list of keys and returns a number.
#
#    Positive results correspond to a true value.
#    Negative results correspond to a false value.
#    """
#    words = expr.split()
#    ok = True
#    for w in words:
#        ok = ok and (re.match(keyDirGlobal.keyRegex , w) or re.match(r"^[*+!]$" , w) or w == "**" or w == "++")
#    if(not ok):
#        raise ValueError("RPN expression has wrong format.")
#    fun_stack = []
#    for w in words:
#        if(w == "+"):
#            if(len(fun_stack) < 2):
#                raise ValueError("Binary operator + requires a stack of at least 2 elements.")
#            part = fun_stack[:-2]
#            rest = fun_stack[-2:]
#            nf = plusFun(rest)
#            fun_stack = part + [nf]
#        elif(w == "*"):
#            if(len(fun_stack) < 2):
#                raise ValueError("Binary operator * requires a stack of at least 2 elements.")
#            part = fun_stack[:-2]
#            rest = fun_stack[-2:]
#            nf = timesFun(rest)
#            fun_stack = part + [nf]
#        elif(w == "++"):
#            nf = plusFun(fun_stack)
#            fun_stack = [nf]
#        elif(w == "**"):
#            nf = timesFun(fun_stack)
#            fun_stack = [nf]
#        elif(w == "!"):
#            if(len(fun_stack) < 1):
#                raise ValueError("The ! operator in RPN expression expects 1 element on stack.")
#            nf = notFun(fun_stack[0])
#            fun_stack = [nf]
#        else:
#            fun_stack.append(isIn(w))
#    if(len(fun_stack) != 1):
#        raise ValueError("RPN expression schould leave stack with one element.")
#    return fun_stack[0]

# GLOBAL VARIABLES

class keyDirGlobal:
    script_dir = None # Path to directory with this script
    keys = {} # {<key> : <short description> ...}
    root_dir = [] # List of directories for searching for .kdKeys files
    dirs = [] # [(<directory> , [<keyword> ...]) ...]List of directories with keys
    keyRegex = r"^[a-z0-9]+$"
    tagRegex = r"^kdTag_[a-z0-9]+$"
    maxPrint = 10
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K' 
    config = [] # Configuration file
    funDict = {
            r"^[^+*-]*$" : isIn
            }
    unDict = {
            r"^[-]$" : notFun 
            }
    binDict = {
                r"^[*]$" : lambda f , g : timesFun([f , g]) , 
                r"^[+]$" : lambda f , g : plusFun([f , g])
        }



if(__name__ == "__main__"):
    parser = argparse.ArgumentParser(description = "Simple file manager.")

    parser.add_argument("--new" , "-n" , nargs = "+" , help = "Set keywords for current directories .kdKeys.")
    
    parser.add_argument("--yank" , "-y" , nargs = "+" , help = "Yank file or directory.")
    
    parser.add_argument("--operate" , "-o" , help = "Run operation on yanked paths. The argument is a command, the @@@ symbol will be replaced by the path.")
    
    parser.add_argument("--unyank" , "-u" , action = "store_true" , help = "Clear yanked paths.")
    
    parser.add_argument("--scan" , "-s" , action="store_true" , help = "Scan system for .kdKeys files.")
    
    parser.add_argument("--tag" , "-t" , help = "Tag current directory, with two argument the second one is the tag description.")
    
    parser.add_argument("--list" , "-l" , action = "store_true" , help = "List all tags.")
    
    parser.add_argument("--clear" , "-c" , action = "store_true" , help = "Clear all tags.")
    
    parser.add_argument("--goto" , "-g" , nargs = 1 , help = "Will print the tag working dir to stdout.")
    
    parser.add_argument("--filter" , "-f" , help = "Will accept an expression to filter keys in dirs.")
    
    parser.add_argument("--bashrc" , "-b" , action = "store_true" , help = "Additional functions for .bashrc.")
    
    parser.add_argument("--info" , "-i" , help = "Print info on keyword.")
    
    parser.add_argument("--prt" , "-p" , action = "store_true" , help = "Print all keywords.")
    
    parser.add_argument("--add" , "-a" , nargs = 2 , help = "Add key and key description.")
    
    parser.add_argument("--dir" , "-d" , action = "store_true" , help = "Print selected directory to stdout.")

    args = parser.parse_args()

    # SET PATH TO SCRIPT DIRECTORY

    keyDirGlobal.script_dir = os.path.dirname(os.path.realpath(__file__))

    # CREATE MISSING FILES

    ## kdKeys

    if(not os.path.exists(os.path.join(keyDirGlobal.script_dir , "kdKeys"))):
        with open(os.path.join(keyDirGlobal.script_dir , "kdKeys") , 'w') as f:
            f.write("")
    else:
        with open(os.path.join(keyDirGlobal.script_dir , 'kdKeys') , 'r') as f:
            for l in f.readlines():
                k , des = l.split('|')
                k , des = k.strip() , des.strip()
                keyDirGlobal.keys.update({k : des})
    if("KEYFILES" in keyDirGlobal.config):
        files = keyDirGlobal.config.items("KEYFILES")
        for key , path in dirs:
            with open(path , 'r') as f:
                for l in f.readlines():
                    k , des = l.split('|')
                    k , des = k.strip() , des.strip()
                    keyDirGlobal.keys.update({k : des})

    ## kdDirs

    if(not os.path.exists(os.path.join(keyDirGlobal.script_dir , "kdDirs"))):
        with open(os.path.join(keyDirGlobal.script_dir , "kdDirs") , 'w') as f:
            f.write("")
    else:
        with open(os.path.join(keyDirGlobal.script_dir , 'kdDirs') , 'r') as f:
            for l in f.readlines():
                d , ks = l.split('|')
                d , ks = d.strip() , ks.strip().split()

                keyDirGlobal.dirs.append((d , ks))

    # READ CONFIGURATION FILE

    keyDirGlobal.config = configparser.ConfigParser()
    keyDirGlobal.config.read(os.path.join(keyDirGlobal.script_dir , "keyDir.config"))
    dirs = keyDirGlobal.config.items("PATHS")
    for key , path in dirs:
        keyDirGlobal.root_dir.append(path)
        #keyDirGlobal.root_dir = keyDirGlobal.config["PATHS"]["root"]

    # NEW

    if(args.new != None):
        ok = True
        newkeys = {}
        dirkeys = []
        for k in args.new:
            if(re.match(keyDirGlobal.keyRegex , k)):
                dirkeys.append(k)
                if(not k in keyDirGlobal.keys):
                    app = input("Key " + k + " not in kdKeys. Append? [N/y] ")
                    ok = ok and (app.lower().strip() == 'y')
                    if(not ok):
                        raise ValueError("Could not append all keys to kdKeys.")
                    des = input("Add short description (max 50 characters the | symbol is reserved): ")
                    ok = ok and (not '|' in des)
                    ok = ok and (len(des) <= 50)
                    if(not ok):
                        raise ValueError("Key description has improper fomat.")
                    newkeys.update({k : des})
            else:
                raise ValueError("Expecting a single all lowercase word as key for directory.")
        if(ok):
            keyDirGlobal.keys.update(newkeys)
            with open(os.path.join(keyDirGlobal.script_dir , 'kdKeys') , 'w') as f:
                for k in keyDirGlobal.keys:
                    f.write(k + " | " + keyDirGlobal.keys[k] + "\n")
            with open(os.path.join(os.getcwd() , '.kdKeys') , 'w') as f:
                for k in dirkeys:
                    f.write(k + "\n")

    # YANK

    if(args.yank != None):
        with open(os.path.join(keyDirGlobal.script_dir , "kdYanked") , 'a+') as f:
            for pth in args.yank:
                f.write(os.path.abspath(pth) + "\n")
    
    # OPERATE

    if(args.operate != None):
        with open(os.path.join(keyDirGlobal.script_dir , "kdYanked") , 'r') as f:
            for pth in f.readlines():
                subprocess.run(args.operate.replace("@@@" , pth.strip()) , shell = True)

    # UNYANK

    if(args.unyank):
        with open(os.path.join(keyDirGlobal.script_dir , "kdYanked") , 'w') as f:
            f.write("")

    # SCAN

    if(args.scan):
        keyDirGlobal.dirs = []
        for dr in keyDirGlobal.root_dir:
            for root , dirs , files in os.walk(dr):
                if(".kdKeys" in files):
                    myKeys = []
                    with open(os.path.join(root , ".kdKeys") , "r") as f:
                        for l in f.readlines():
                            myKeys.append(l.strip())
                    keyDirGlobal.dirs.append((root , myKeys))

        with open(os.path.join(keyDirGlobal.script_dir , "kdDirs") , "w") as f:
            for d in keyDirGlobal.dirs:
                f.write(d[0] + " | ")
                for k in d[1]:
                    f.write(k + " ")
                f.write("\n")

    # TAG

    if(args.tag != None):
        if(re.match(keyDirGlobal.keyRegex , args.tag)):
            with open(os.path.join(keyDirGlobal.script_dir , "kdTag_" + args.tag) , "w") as f:
                f.write(os.getcwd())
            #tag_description = "---"
            #if(len(args.tag) == 2 and len(args.tag[1]) <= 50):
            #    tag_description = args.tag[1].strip()
            #with open(os.path.join(keyDirGlobal.script_dir , "kdTagDes_" + args.tag[0]) , "w") as f:
            #    f.write(tag_description)
        else:
            raise ValueError("Tag name is invalid or number of arguments for tag exceeds 2.")
               
    # LIST

    def toStrT(tg):
        return str(tg[0])

    def toPrvT(tg):
        return str(tg[1])
    
    if(args.list):
#        print("\033[31;1m<tag> | <directory>" , "\033[0m")
        all = []
        tag_files = [f for f in os.listdir(os.path.join(keyDirGlobal.script_dir)) if re.match(keyDirGlobal.tagRegex , f)]
        for t in tag_files:
            tag = t[6:]
            tag_dir = None
            #tag_des = None
            with open(os.path.join(os.path.join(keyDirGlobal.script_dir) , t) , "r") as f:
                tag_dir = f.read().strip()
            #with open(os.path.join(os.path.join(keyDirGlobal.script_dir) , "kdTagDes_" + tag) , "r") as f:
            #    tag_des = f.read().strip()
            #print(tag , "|" , tag_des)
            #print(tag)
            all.append((tag , tag_dir))
        ch = niceMenu.niceMenu.get_choice(all , toStrT , "<tag>" , toPrvT , "<directory>")
        #sys.stdout.write(keyDirGlobal.CURSOR_UP_ONE)
        #sys.stdout.write(keyDirGlobal.ERASE_LINE)
        if(ch != None):
            with open(os.path.join(keyDirGlobal.script_dir , "kdSelection") , "w") as f1:
                f1.write(ch[1].strip())
        else:
            with open(os.path.join(keyDirGlobal.script_dir , "kdSelection") , "w") as f:
                f.write(os.getcwd())      

    # CLEAR

    if(args.clear):
        tag_files = [f for f in os.listdir(os.path.join(keyDirGlobal.script_dir)) if re.match(keyDirGlobal.tagRegex , f)]
            
        print("Will remove:")
        
        for t in tag_files:
            tag = t[6:]
            print(os.path.join(os.path.join(keyDirGlobal.script_dir) , t))
            #print(os.path.join(os.path.join(keyDirGlobal.script_dir) , "kdTagDes_" + tag))

        con = input("Continue? [n/Y] ")

        if(con.lower() == "y"):
            for t in tag_files:
                tag = t[6:]
                os.remove(os.path.join(os.path.join(keyDirGlobal.script_dir) , t))
                #os.remove(os.path.join(os.path.join(keyDirGlobal.script_dir) , "kdTagDes_" + tag))

    # GOTO

    if(args.goto != None):
        if(os.path.exists(os.path.join(keyDirGlobal.script_dir , "kdTag_" + args.goto[0]))):
            with open(os.path.join(keyDirGlobal.script_dir , "kdTag_" + args.goto[0]) , 'r') as f:
                sys.stdout.write(f.read().strip())
            with open(os.path.join(keyDirGlobal.script_dir , "kdTag_" + args.goto[0]) , 'r') as f:
                with open(os.path.join(keyDirGlobal.script_dir , "kdSelection") , "w") as f1:
                    f1.write(f.read().strip())
        else:
            raise ValueError("Tag is not inside " + keyDirGlobal.script_dir)

    # BASHRC

    if(args.bashrc):
        print("###################################################################################")	
        print("# additional functions for keyDir (https://github.com/kacpertopol/useful_scripts) #")
        print("###################################################################################")	
        print("")
        print("function kdg { cd $( " + os.path.join(keyDirGlobal.script_dir , "keyDir")  + " --goto \"$1\" ) ; }")
        print("")
        print("function kdt { " + os.path.join(keyDirGlobal.script_dir , "keyDir")  + " --list && " + \
                "cd $( cat " + os.path.join(keyDirGlobal.script_dir , "kdSelection") + " ) ; }")
        print("")
        print("function kdf { " + os.path.join(keyDirGlobal.script_dir , "keyDir")  + " --filter \"$1\" && " \
                + "cd $( cat " + os.path.join(keyDirGlobal.script_dir , "kdSelection") + " ) ; }")
        print("")
        print("alias kd='" + os.path.join(keyDirGlobal.script_dir , "keyDir")  + "'")
        print("")
        print("###################################################################################")	

    # FILTER

    def toStrD(el):
        return str(el[0]) + " | " + str(el[2])

    def toPrvD(el):
        preview = str(el[1])
        if(os.path.isfile(os.path.join(el[1] , "README"))):
            with open(os.path.join(el[1] , "README") , "r") as f:
                preview = f.read().strip().replace("\n" , "|")
        if(os.path.isfile(os.path.join(el[1] , "README.md"))):
            with open(os.path.join(el[1] , "README.md") , "r") as f:
                preview = f.read().strip().replace("\n" , "|")
        #return str(el[1])
        return preview
    
    if(args.filter != None):
        results = []
        #fun = parseRPN(args.filter)
        fun = niceParse.parseRPN(args.filter , keyDirGlobal.funDict , keyDirGlobal.unDict , keyDirGlobal.binDict)
        for d in keyDirGlobal.dirs:
            s = fun(d[1])
            results.append((s , d[0] , d[1]))
        results.sort(key = lambda x : -x[0])
        #sel = results[-keyDirGlobal.maxPrint:]
        #ii = len(sel)
#        print("\033[31;1m" , "<score> | <dir name> [<key words> ...]\033[0m")
        choice = niceMenu.niceMenu.get_choice(results , toStrD , "<score> | [<key words> ...]" , toPrvD , "<directory>")
        if(choice != None):
            with open(os.path.join(keyDirGlobal.script_dir , "kdSelection") , "w") as f:
                f.write(choice[1])
        else:
            with open(os.path.join(keyDirGlobal.script_dir , "kdSelection") , "w") as f:
                f.write(os.getcwd())
        #sys.stdout.write(keyDirGlobal.CURSOR_UP_ONE)
        #sys.stdout.write(keyDirGlobal.ERASE_LINE)
        #for d in sel:
        #    print(ii , " | " , d[0] , os.path.basename(d[1]) , d[2])
        #    ii -= 1
        #ch = input("Which directory? [number of q to quit] ")
        #if(ch.strip().lower() != "q"):
        #    num = len(sel) - int(ch)
        #    with open(os.path.join(keyDirGlobal.script_dir , "kdSelection") , "w") as f:
        #        f.write(sel[num][1])
        #else:
        #    with open(os.path.join(keyDirGlobal.script_dir , "kdSelection") , "w") as f:
        #        f.write(os.getcwd())

    # INFO

    if(args.info != None):
        if(re.match(keyDirGlobal.keyRegex , args.info)):
            if(args.info in keyDirGlobal.keys):
                print(keyDirGlobal.keys[args.info])

    # PRINT

    if(args.prt):
        print("\033[31;1m<key>  | " , "<description>\033[0m")
        with open(os.path.join(keyDirGlobal.script_dir , "kdKeys") , "r") as f:
            for l in f.readlines():
                sys.stdout.write(l)

    # ADD

    if(args.add != None):
        if(re.match(keyDirGlobal.keyRegex , args.add[0]) and (not args.add[0] in keyDirGlobal.keys) and len(args.add[1]) < 50):
            with open(os.path.join(keyDirGlobal.script_dir , 'kdKeys') , 'a') as f:
                f.write(args.add[0] + " | " + args.add[1] + "\n")
    
    # DIR
   
    if(args.dir):
        with open(os.path.join(keyDirGlobal.script_dir , "kdSelection") , "r") as f:
            sys.stdout.write(f.read())
