#!/usr/bin/env python3

import os
import argparse
import urllib.request
import re
import configparser
import sys , tty , termios
import xml.etree.ElementTree as ET
import pickle
import datetime
import subprocess

import niceMenu
import niceParse

# GLOBAL VARIABLES

class rssReaderGlobal:
    script_dir = None # Path to directory with this script
    config = [] # Configuration file
    urls = [] # Feed URLs
    history = [] # history
    keyRegex = r"^[a-z0-9]+$"
    programs = {}
    CURSOR_UP_ONE = '\x1b[1A' 
    ERASE_LINE = '\x1b[2K' 
    funDict = {
            r"^[^+*-]*$" : lambda x : (lambda keys : x in keys)
            }
    unDict = {
            r"^[-]$" : lambda f : (lambda keys : not(f(keys)))
            }
    binDict = {
                r"^[*]$" : lambda f , g : (lambda keys : (f(keys) and g(keys))) , 
                r"^[+]$" : lambda f , g : (lambda keys : (f(keys) or g(keys)))
        }


# FUNCTIONS TO PARSE RPN EXPRESSION

#def plusFun(funs):
#    def newfun(keys):
#        score_p = 0
#        score_n = 0
#        ok = False
#        for f in funs:
#            r = f(keys)
#            if(r >= 0):
#                score_p = score_p + r
#                ok = True
#            else:
#                score_n  = score_n + r
#        if(ok):
#            return score_p
#        else:
#            return score_n
#    return newfun
#
#def timesFun(funs):
#    def newfun(keys):
#        score_p = 1
#        score_n = 1
#        ok = True
#        for f in funs:
#            r = f(keys)
#            if(r >= 0):
#                score_p = score_p * r
#            else:
#                score_n = score_n * (-r)
#                ok = False
#        if(ok):
#            return score_p
#        else:
#            return -score_n
#    return newfun
#
#def notFun(fun):
#    def newfun(keys):
#        score = -1 * fun(keys)
#        return score
#    return newfun
#
#def isIn(key):
#    def newfun(keys):
#        ok = False
#        for k in keys:
#            if(k == key):
#                ok = True
#        if(ok):
#            return 1
#        else:
#            return -1
#    return newfun
#
#def parseRPN(expr):
#    """
#    RPN expression -expr- will be parsed into a function
#    that acts in on a list of keys and returns a number.
#
#    Positive results correspond to a true value.
#    Negative results correspond to a false value.
#    """
#    words = expr.split()
#    ok = True
#    for w in words:
#        ok = ok and (re.match(rssReaderGlobal.keyRegex , w) or re.match(r"^[*+!]$" , w))
#    if(not ok):
#        raise ValueError("RPN expression has wrong format.")
#    fun_stack = []
#    for w in words:
#        if(w == "+"):
#            if(len(fun_stack) < 2):
#                raise ValueError("The + operator in RPN expression expects 2 elements on stack.")
#            part = fun_stack[:-2]
#            rest = fun_stack[-2:]
#            nf = plusFun(rest)
#            fun_stack = part + [nf]
#        elif(w == "*"):
#            if(len(fun_stack) < 2):
#                raise ValueError("The * operator in RPN expression expects 2 elements on stack.")
#            part = fun_stack[:-2]
#            rest = fun_stack[-2:]
#            nf = timesFun(rest)
#            fun_stack = part + [nf]
#        elif(w == "!"):
#            if(len(fun_stack) != 1):
#                raise ValueError("The ! operator in RPN expression expects 1 element on stack.")
#            nf = notFun(fun_stack[0])
#            fun_stack = [nf]
#        else:
#            fun_stack.append(isIn(w))
#    if(len(fun_stack) != 1):
#        raise ValueError("RPN expression schould leave stack with one element.")
#    return fun_stack[0]

if(__name__ == "__main__"):
    parser = argparse.ArgumentParser(description = "Simple rss reader.")

    parser.add_argument("--scan" , "-s" , action="store_true" , help = "Scan feeds from rssURLs.")

    parser.add_argument("--filter" , "-f" , help = "Will accept an expression to filter keys.")

    args = parser.parse_args()

    # SET PATH TO SCRIPT DIRECTORY

    rssReaderGlobal.script_dir = os.path.dirname(os.path.realpath(__file__))

    # CREATE MISSING FILES

    ## rssHistory

    if(not os.path.exists(os.path.join(rssReaderGlobal.script_dir , "rssHistory"))):
        with open(os.path.join(rssReaderGlobal.script_dir , "rssHistory") , 'w') as f:
            f.write("")
    else:
        with open(os.path.join(rssReaderGlobal.script_dir , "rssHistory") , 'r') as f:
            ln = 0
            for feed in f.readlines():
                ln = ln + 1
                if(not feed.strip()[0] == "#"):
                    spl = feed.split("|||")
                    keys = spl[0].strip().split()
                    feed_title = spl[1].strip()
                    title = spl[2].strip()
                    link = spl[3].strip()
                    pubdate = spl[4].strip()
                    content = [keys , feed_title , title , link , pubdate]
                    rssReaderGlobal.history.append(content)

    ## rssFeeds
    
    if(not os.path.exists(os.path.join(rssReaderGlobal.script_dir , "rssURLs"))):
        with open(os.path.join(rssReaderGlobal.script_dir , "rssURLs") , 'w') as f:
            f.write("")
    
    ## rssFeeds
    
    if(not os.path.exists(os.path.join(rssReaderGlobal.script_dir , "rssFeeds"))):
        with open(os.path.join(rssReaderGlobal.script_dir , "rssFeeds") , 'w') as f:
            f.write("") 

    ## rssReader.config
    
    if(not os.path.exists(os.path.join(rssReaderGlobal.script_dir , "rssReader.config"))):
        with open(os.path.join(rssReaderGlobal.script_dir , "rssReader.config") , 'w') as f:
            f.write("[PROGRAMS]\n")   

    mths = {
	'jan' : 1,
	'feb' : 2,
	'mar' : 3,
	'apr' : 4,
	'may' : 5,
	'jun' : 6,
	'jul' : 7,                                                                                                                                   
	'aug' : 8,
	'sep' : 9, 
	'oct' : 10,
	'nov' : 11,
	'dec' : 12
	}
 
    if(args.scan):
        errors = []
        with open(os.path.join(rssReaderGlobal.script_dir , 'rssURLs') , 'r') as f:
            ln = 0
            for l in f.readlines():
                ln = ln + 1
                if(len(l.strip()) > 0 and l.strip()[0] != "#"):
                    spl = l.split("|")
                    url = spl[0].strip()
                    keys = spl[1].split()
                    for k in keys:
                        if(not re.match(rssReaderGlobal.keyRegex , k)):
                            raise ValueError("Keys for " + url + " in rssURLs have improper format.")
                    try:
                        with urllib.request.urlopen(url) as response:
                            content = []
                            rss = response.read()
                            root = ET.fromstring(rss)
                            if("rss" in root.tag):
                                feed_title = None
                                for child in root:
                                    if("channel" in child.tag):
                                        for childchild in child:
                                            if("title" in childchild.tag):
                                                feed_title = childchild.text
                                        for childchild in child:
                                            if("item" in childchild.tag):
                                                title = None
                                                link = None
                                                pubdate = None
                                                for childchildchild in childchild:
                                                    if("pubDate" in childchildchild.tag):
                                                        line = childchildchild.text
                                                        try:
                                                            if(not("," in line)):
                                                                datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
                                                                dte = datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]).timestamp()
                                                            else:
                                                                datelist = line.split(" ")[1:4]
                                                                dte = datetime.datetime(year = int(datelist[2]) , month = mths[datelist[1].lower()] , day = int(datelist[0])).timestamp()
                                                        except Exception as e:
                                                            errors.append("[ERROR] " + str(datetime.now()) + "  Could not get publication date from: " + url + ". Line " + str(ln) + " of rssURLs." + str([title , link , feed_title]))
                                                        pubdate = int(dte)
                                                    elif("title" in childchildchild.tag):
                                                        title = childchildchild.text
                                                    elif("link" in childchildchild.tag):
                                                        if(childchildchild.text != None):
                                                            link = childchildchild.text
                                                        elif("href" in childchildchild.attrib):
                                                            link = childchildchild.attrib["href"]
                                                if(title == None or link == None or feed_title == None or pubdate == None):
                                                    errors.append("[ERROR] " + str(datetime.now()) + "  Could not get content data from: " + url + ". Line " + str(ln) + " of rssURLs." + str([title , link , feed_title , pubdate]))
                                                else:
                                                    rssReaderGlobal.urls.append([keys , feed_title.replace("\n" , " ") , title.replace("\n" , " ") , link.replace("\n" , " ") , str(pubdate)])
                            elif("feed" in root.tag): # published
                                feed_title = None
                                for child in root:
                                    if("title" in child.tag):
                                        feed_title = child.text
                                for child in root:
                                    if("entry" in child.tag):
                                        title = None
                                        link = None
                                        pubdate = None
                                        for childchild in child:
                                            if("published" in childchild.tag):
                                                line = childchild.text
                                                try:
                                                    if(not("," in line)):
                                                        datelist = list(map(lambda x : int(x) , line.strip().split('T')[0].split("-")))
                                                        dte = datetime.datetime(year = datelist[0] , month = datelist[1] , day = datelist[2]).timestamp()
                                                    else:
                                                        datelist = line.split(" ")[1:4]
                                                        dte = datetime.datetime(year = int(datelist[2]) , month = mths[datelist[1].lower()] , day = int(datelist[0])).timestamp()
                                                except Exception as e:
                                                    errors.append("[ERROR] " + str(datetime.now()) + "  Could not get publication date from: " + url + ". Line " + str(ln) + " of rssURLs." + str([title , link , feed_title]))
                                                pubdate = int(dte)
                                            elif("title" in childchild.tag):
                                                title = childchild.text
                                            elif("link" in childchild.tag):
                                                if(childchild.text != None):
                                                    link = childchild.text
                                                elif("href" in childchild.attrib):
                                                    link = childchild.attrib["href"]
                                        if(title == None or link == None or feed_title == None or pubdate == None):
                                            errors.append("[ERROR] " + str(datetime.now()) + "  Could not get content data from: " + url + ". Line " + str(ln) + " of rssURLs." + str([title , link , feed_title , pubdate]))
                                        else:
                                            rssReaderGlobal.urls.append([keys , feed_title.replace("\n" , " ") , title.replace("\n" , " ") , link.replace("\n" , " ") , str(pubdate)])
                            else:
                                errors.append("[ERROR] URL not feed or rss : " + url + ". Line " + str(ln) + " of rssURLs.")
                    except:
                        errors.append("[ERROR] Could not get feed from: " + url + ". Line " + str(ln) + " of rssURLs.")
        rssReaderGlobal.urls.sort(key = lambda x : -int(x[4]))
        with open(os.path.join(rssReaderGlobal.script_dir , "rssFeeds") , 'w') as f:
            for url in rssReaderGlobal.urls:
                f.write(" ".join(url[0]) + " ||| " + " ||| ".join(url[1:]) + "\n") 
        with open(os.path.join(rssReaderGlobal.script_dir , "rssErrors") , "a+") as f:
            for e in errors:
                f.write(str(e) + "\n")
    else:
        with open(os.path.join(rssReaderGlobal.script_dir , "rssFeeds") , 'r') as f:
            ln = 0
            for feed in f.readlines():
                ln = ln + 1
                spl = feed.split("|||")
                keys = spl[0].strip().split()
                feed_title = spl[1].strip()
                title = spl[2].strip()
                link = spl[3].strip()
                pubdate = spl[4].strip()
                content = [keys , feed_title , title , link , pubdate]
                rssReaderGlobal.urls.append(content)




    # READ CONFIGURATION FILE

    rssReaderGlobal.config = configparser.ConfigParser()
    rssReaderGlobal.config.read(os.path.join(rssReaderGlobal.script_dir , "rssReader.config"))
    prgs = rssReaderGlobal.config.items("PROGRAMS")
    for prg , path in prgs:
        rssReaderGlobal.programs.update({prg : path})

    # FILTER

    def toStrD(el):
        return str(el[2])

    def toStrPrv(el):
        return str(el[1])

    def toStrP(el):
        return el
    
    if(args.filter != None):
        seen = []
        for h in rssReaderGlobal.history:
            seen.append(h[3])
        results = []
        #fun = parseRPN(args.filter)
        fun = niceParse.parseRPN(args.filter , rssReaderGlobal.funDict , rssReaderGlobal.unDict , rssReaderGlobal.binDict)
        for d in rssReaderGlobal.urls:
            s = fun(d[0])
            if(s > 0 and (not d[3] in seen)):
                results.append(d)
        if(len(results) > 0):
            choice = niceMenu.niceMenu.get_choice(results , toStrD , "<title>" , toPrv = toStrPrv , bottom = "<feed>")
            #sys.stdout.write(rssReaderGlobal.CURSOR_UP_ONE)
            #sys.stdout.write(rssReaderGlobal.ERASE_LINE)
            if(choice != None):
                pr = niceMenu.niceMenu.get_choice(list(rssReaderGlobal.programs) , toStrP , "<open with>")
                #sys.stdout.write(rssReaderGlobal.CURSOR_UP_ONE)
                #sys.stdout.write(rssReaderGlobal.ERASE_LINE)
                print("RUNNING: " + rssReaderGlobal.programs[pr].replace("@@@" , choice[3]))
                print("WRITTING TO: " + os.path.join(rssReaderGlobal.script_dir , "rssHistory"))
                with open(os.path.join(rssReaderGlobal.script_dir , "rssHistory") , 'a+') as f:
                    f.write(" ".join(choice[0]) + " ||| " + " ||| ".join(choice[1:]) + "\n") 
                if(pr != None):
                    rc = subprocess.run(rssReaderGlobal.programs[pr].replace("@@@" , choice[3]) , shell = True) 
                    if(rc.returncode != 0):
                        print("ERRORS OCCURED")

