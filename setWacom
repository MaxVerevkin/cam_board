#!/usr/bin/env python3

import subprocess
import argparse

class Geom:
    # Window position
    pos = None
    # Window size
    sze = None
    # Wacom tablets
    tablets = []
    # Wacom tablet geometries
    sizes = {}

if(__name__ == "__main__"):
    parser = argparse.ArgumentParser(description = "Set wacom tablet.")

    parser.add_argument("--clockwise" , "-c" , action = "store_true" , help = "Rotate tablet clockwise.")
    parser.add_argument("--anticlockwise" , "-a" , action = "store_true" , help = "Rotate tablet anti-clockwise.")
    parser.add_argument("--up" , "-u" , action = "store_true" , help = "Rotate tablet 180 deg.")

    args = parser.parse_args()

    window_geometry = subprocess.check_output(['xdotool' , 'selectwindow' , 'getwindowgeometry']).decode('utf-8')
    for line in window_geometry.split("\n"):
        if("Position" in line):
            Geom.pos = list(map(int , line.split()[1].split(",")))
            #print(Geom.pos)
        if("Geometry" in line):
            Geom.sze = list(map(int , line.split()[1].split("x")))
            #print(Geom.sze)
    alltab = subprocess.check_output(['xsetwacom' , 'list' , 'devices']).decode('utf-8')
    for line in alltab.split("\n"):
        if("type" in line):
            Geom.tablets.append(line.split('id')[0].strip())
    for tab in Geom.tablets:
        subprocess.run(['xsetwacom' , 'set' , tab , "Rotate" , "none"])
        rotated = False
        if(args.up):
            subprocess.run(['xsetwacom' , 'set' , tab , "Rotate" , "half"])
        elif(args.anticlockwise):
            subprocess.run(['xsetwacom' , 'set' , tab , "Rotate" , "ccw"])
            rotated = True
        elif(args.clockwise):
            subprocess.run(['xsetwacom' , 'set' , tab , "Rotate" , "cw"])
            rotated = True
        info = subprocess.check_output(['xsetwacom' , '--get' , tab , "Area"]).decode('utf-8')
        data = list(map(int , info.split()))
        if(rotated):
            tmp = data[3]
            data[3] = data[2]
            data[2] = tmp
        Geom.sizes.update({tab : tuple(data)})
    for tab in Geom.sizes:
        tabx0 , taby0 , tabx , taby = Geom.sizes[tab]
        scrx0 , scry0 = Geom.pos
        scrx , scry = Geom.sze
        finalx , finaly = scrx , scry
        newx , newy = int(scry * float(tabx) / float(taby)) , scry
        if(newx >= scrx and newy >= scry):
            finalx , finaly = newx , newy
        newx , newy = scrx , int(scrx * float(taby) / float(tabx)) 
        if(newx >= scrx and newy >= scry):
            finalx , finaly = newx , newy
        new = str(finalx) + "x" + str(finaly) + "+" + str(scrx0) + "+" + str(scry0)
        subprocess.run(['xsetwacom' , 'set' , tab , 'MapToOutput' , new])

