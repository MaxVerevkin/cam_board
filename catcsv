#!/usr/bin/env python3

import argparse

if(__name__ == "__main__"):
    parser = argparse.ArgumentParser(description = "A printable table from a CSV file will be sent to standard output.")
    parser.add_argument("path" , help = "Path to csv file.")
    parser.add_argument("--right" , "-r" , help = "Number of columns to pad right of table.")
    parser.add_argument("--left" , "-l" , help = "Number of columns to pad left of table.")
    parser.add_argument("--down" , "-d" , help = "Number of rows to pad below table.")
    parser.add_argument("--up" , "-u" , help = "Number of rows to pad above table.")
    parser.add_argument("--separator" , "-s" , help = "Separator, by default ;.")
    parser.add_argument("--num" , "-n" , help = "Number of spaces for extra columns, by default 10.")
    args = parser.parse_args()
    
    separator = ";"
    if(args.separator != None):
        separator = args.separator

    num = 10
    if(args.num != None):
        num = int(args.num)

    if(args.right == None):
        args.right = 0
    
    if(args.left == None):
        args.left = 0
   
    if(args.down == None):
        args.down = 0
    
    if(args.up == None):
        args.up = 0
    
    left = int(args.left)
    right = int(args.right)
    up = int(args.up)
    down = int(args.down)
    
    boxH = u'\u2500' # -
    boxV = u'\u2502' # |
    boxC = u'\u253C' # +
    boxBL = u'\u2514' # bottom left
    boxBR = u'\u2518' # bottom right
    boxTL = u'\u250C' # top left
    boxTR = u'\u2510' # top right
    boxL = u'\u2524' # pointing to left
    boxR = u'\u251C' # pointing to right
    boxDW = u'\u252C' # pointing down
    boxUP = u'\u2534' # pointing down

    #print(boxH)
    #print(boxV)
    #print(boxC)

    table = []
    cls = -1
    rws = 0
    with open(args.path , "r" , encoding='utf-8-sig') as f:
    #with open(args.path , "r") as f:
        for line in f.readlines():
            rws += 1
            #print(line)
            row = line.strip().split(separator)
            table.append(row)
            if(cls == -1):
                cls = len(row)
            else:
                if(len(row) != cls):
                    raise ValueError("Expecting rectangular array.")

    def val(r , c):
        if(c >= left and c < left + cls and r >= up and r < up + rws):
            return table[r - up][c - left].strip()
        else:
            return " " * num

    table = [[val(r , c) for c in range(cls + left + right)] for r in range(rws + up + down)]
    
    cls = cls + left + right
    rws = rws + up + down

    lns = [-1 for i in range(cls)]

    for row in table:
        for i in range(cls):
            if(lns[i] < len(row[i])):
                lns[i] = len(row[i])
   
    top = boxTL
    for i in range(cls):
        top = top + lns[i] * boxH
        if(i == cls - 1):
            top = top + boxTR
        else:
            top = top + boxDW
    
    print(top)

    ii = 0
    for row in table:
        d = boxR
        r = boxV
        for i in range(cls):
            r = r + row[i] + (lns[i] - len(row[i])) * " " + boxV
            d = d + lns[i] * boxH 
            if(i == cls - 1):
                d = d + boxL
            else:
                d = d + boxC

        print(r)

        if(ii != len(table) - 1):
            print(d)

        ii = ii + 1

    bottom = boxBL
    for i in range(cls):
        bottom = bottom + lns[i] * boxH
        if(i == cls - 1):
            bottom = bottom + boxBR
        else:
            bottom = bottom + boxUP

    print(bottom)
