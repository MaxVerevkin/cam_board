#!/usr/bin/env python

import argparse
import sys
import subprocess

class xoj_data:
    """Data for xoj_present."""
    
    def __init__(self):
        xoj_data.features = []
        self.add_features()
        self.verb = False
        self.parameters = None

    def add_features(self):
        prc = subprocess.run("zcat -V" , shell = True , stdout = subprocess.PIPE , stderr = subprocess.PIPE)
        if(prc.returncode == 0):
            self.features += ["zcat"]
        else:
            sys.stderr.write("[WARNING] Could not find zcat.\n");   
        prc = subprocess.run("gzip -V" , shell = True , stdout = subprocess.PIPE , stderr = subprocess.PIPE)
        if(prc.returncode == 0):
            self.features += ["gzip"]
        else:
            sys.stderr.write("[WARNING] Could not find gzip.\n");   

    def copy_xoj(self , path , opath):
        if(self.parameters == None):
            sys.stderr.write("[ERROR] copy requires two parameters.\n")
        elif(len(self.parameters) != 2):
            sys.stderr.write("[ERROR] copy requires two parameters.\n")
        if("zcat" in self.features):
            prc = subprocess.run(["zcat" , path] , stdout = subprocess.PIPE , stderr = subprocess.PIPE)
            if(prc.returncode == 0): 
                self.lines = prc.stdout.splitlines()
                line_number = 0
                page_number = 0
                page = [0 , 0]
                self.pages = []
                layer = [0 , 0]
                self.layers = []
                for line in self.lines:
                    line = line.decode()
                    if("<page" in line):
                        page_number += 1
                        page[0] = line_number
                        self.layers += [[]]
                    if("page>" in line):
                        page[1] = line_number
                        self.pages += [page.copy()]
                    if("<layer>" in line):
                        layer[0] = line_number
                    if("</layer>" in line):
                        layer[1] = line_number
                        self.layers[page_number - 1] += [layer.copy()]
                    if("<layer/>" in line):
                        layer[0] = line_number
                        layer[1] = line_number
                        self.layers[page_number - 1] += [layer.copy()]
                    line_number += 1
                if(len(self.pages) < 1):
                    sys.stderr.write("[ERROR] To few pages (less then one) in xoj file.\n")
                    sys.exit(1)
                pgnum = 1
                for ly in self.layers:
                    if(len(ly) < 2):
                        sys.stderr.write("[ERROR] Page " + str(pgnum) + " with too few layers (less then two) in xoj file.\n")
                        sys.exit(1)
                    pgnum += 1
                # Add everything before the first page:
                new = self.lines[0:self.pages[0][0]]
                for pg in range(len(self.pages))[0:int(self.parameters[1]) - 1 + 1]:
                    new += self.lines[self.pages[pg][0] : self.pages[pg][1] + 1]
                new += self.lines[self.pages[int(self.parameters[0]) - 1][0] : self.pages[int(self.parameters[0]) - 1][1] + 1]
                for pg in range(len(self.pages))[int(self.parameters[1]) - 1 + 1 :]:
                    new += self.lines[self.pages[pg][0] : self.pages[pg][1] + 1]
                # Add everything after the last page:
                new += self.lines[self.pages[-1][1] + 1 :]
                if("gzip" in self.features):
                    all_new = ""
                    for ln in new:
                        all_new += ln.decode() + "\n"
                    proc = subprocess.run(["gzip" , "-"] , stdout = subprocess.PIPE , input = all_new.encode())
                    if(proc.returncode != 0):
                        sys.stderr.write("[ERROR] gzip returned non zero exit code.")
                        sys.exit(1)
                    with open(opath , "wb") as tm:
                        tm.write(proc.stdout)
            else:
                sys.stderr.write("[ERROR] non zero exit code from zcat.\n")
                sys.exit(1)
        else:
            sys.stderr.write("[ERROR] zcat program not found.\n")
            sys.exit(1)

    def parse_xoj(self , path , opath):
        if("zcat" in self.features):
            prc = subprocess.run(["zcat" , path] , stdout = subprocess.PIPE , stderr = subprocess.PIPE)
            if(prc.returncode == 0): 
                self.lines = prc.stdout.splitlines()
                line_number = 0
                page_number = 0
                page = [0 , 0]
                self.pages = []
                layer = [0 , 0]
                self.layers = []
                for line in self.lines:
                    line = line.decode()
                    if("<page" in line):
                        page_number += 1
                        page[0] = line_number
                        self.layers += [[]]
                    if("page>" in line):
                        page[1] = line_number
                        self.pages += [page.copy()]
                    if("<layer>" in line):
                        layer[0] = line_number
                    if("</layer>" in line):
                        layer[1] = line_number
                        self.layers[page_number - 1] += [layer.copy()]
                    if("<layer/>" in line):
                        layer[0] = line_number
                        layer[1] = line_number
                        self.layers[page_number - 1] += [layer.copy()]
                    line_number += 1
                if(len(self.pages) < 1):
                    sys.stderr.write("[ERROR] To few pages (less then one) in xoj file.\n")
                    sys.exit(1)
                pgnum = 1
                for ly in self.layers:
                    if(len(ly) < 2):
                        sys.stderr.write("[ERROR] Page " + str(pgnum) + " with too few layers (less then two) in xoj file.\n")
                        sys.exit(1)
                    pgnum += 1
                # Add everything before the first page:
                new = self.lines[0:self.pages[0][0]]
                # The 1 layer of the 1 pagee apears on all consecutive slides.
                if(self.verb):
                    print("ADDING COMMON LAYER")
                all_layer = self.lines[self.layers[0][0][0] : self.layers[0][0][1] + 1]
                # Add the title page:
                new += self.lines[self.pages[0][0] : self.pages[0][1] + 1]
                section = []
                subsection = []
                for pg in range(len(self.pages))[1:]:
                    if(self.verb):
                        print("PAGE: " + str(pg + 1))
                        print("LAYERS IN PAGE: " + str(len(self.layers[pg])))
                    #print(self.layers[pg][0][1] + 1 , self.layers[pg][0][0] + 1 , self.layers[pg][0][1] - self.layers[pg][0][0])
                    if(self.layers[pg][0][1] - self.layers[pg][0][0] > 1):
                        if(self.verb):
                            print("ADDING SECTION")
                        section = self.lines[self.layers[pg][0][0] : self.layers[pg][0][1] + 1]
                        subsection = []
                    if(self.layers[pg][1][1] - self.layers[pg][1][0] > 1):
                        if(self.verb):
                            print("ADDING SUBSECTION")
                        subsection = self.lines[self.layers[pg][1][0] : self.layers[pg][1][1] + 1]
                    new += self.lines[self.pages[pg][0] : self.layers[pg][0][0]]
                    new += all_layer
                    new += section
                    new += subsection
                    new += self.lines[self.layers[pg][-1][1] + 1 : self.pages[pg][1] + 1]
                    for ly in range(len(self.layers[pg]))[2:]:
                        if(self.verb):
                            print("LAYER: " + str(ly))
                        new += self.lines[self.pages[pg][0] : self.layers[pg][0][0]]
                        new += all_layer
                        new += section
                        new += subsection
                        for lly in range(ly + 1)[2:]:
                            if(self.verb):
                                print("WRITING LAYER: " + str(lly))
                            new += self.lines[self.layers[pg][lly][0] : self.layers[pg][lly][1] + 1]
                        new += self.lines[self.layers[pg][-1][1] + 1 : self.pages[pg][1] + 1]
                # Add everything after the last page:
                new += self.lines[self.pages[-1][1] + 1 :]
                if("gzip" in self.features):
                    all_new = ""
                    for ln in new:
                        all_new += ln.decode() + "\n"
                    proc = subprocess.run(["gzip" , "-"] , stdout = subprocess.PIPE , input = all_new.encode())
                    if(proc.returncode != 0):
                        sys.stderr.write("[ERROR] gzip returned non zero exit code.")
                        sys.exit(1)
                    with open(opath , "wb") as tm:
                        tm.write(proc.stdout)
            else:
                sys.stderr.write("[ERROR] non zero exit code from zcat.\n")
                sys.exit(1)
        else:
            sys.stderr.write("[ERROR] zcat program not found.\n")
            sys.exit(1)

    def simpleparse_xoj(self , path , opath):
        if("zcat" in self.features):
            prc = subprocess.run(["zcat" , path] , stdout = subprocess.PIPE , stderr = subprocess.PIPE)
            if(prc.returncode == 0): 
                self.lines = prc.stdout.splitlines()
                line_number = 0
                page_number = 0
                page = [0 , 0]
                self.pages = []
                layer = [0 , 0]
                self.layers = []
                for line in self.lines:
                    line = line.decode()
                    if("<page" in line):
                        page_number += 1
                        page[0] = line_number
                        self.layers += [[]]
                    if("page>" in line):
                        page[1] = line_number
                        self.pages += [page.copy()]
                    if("<layer>" in line):
                        layer[0] = line_number
                    if("</layer>" in line):
                        layer[1] = line_number
                        self.layers[page_number - 1] += [layer.copy()]
                    if("<layer/>" in line):
                        layer[0] = line_number
                        layer[1] = line_number
                        self.layers[page_number - 1] += [layer.copy()]
                    line_number += 1
                new = self.lines[0:self.pages[0][0]]
                for pg in range(len(self.pages)):
                    if(self.verb):
                        print("PAGE: " + str(pg + 1))
                        print("LAYERS IN PAGE: " + str(len(self.layers[pg])))
                    for ly in range(len(self.layers[pg])):
                        if(self.verb):
                            print("LAYER: " + str(ly))
                        new += self.lines[self.pages[pg][0] : self.layers[pg][0][0]]
                        for lly in range(ly + 1):
                            if(self.verb):
                                print("WRITING LAYER: " + str(lly))
                            new += self.lines[self.layers[pg][lly][0] : self.layers[pg][lly][1] + 1]
                        new += self.lines[self.layers[pg][-1][1] + 1 : self.pages[pg][1] + 1]
                new += self.lines[self.pages[-1][1] + 1 :]
                if("gzip" in self.features):
                    all_new = ""
                    for ln in new:
                        all_new += ln.decode() + "\n"
                    proc = subprocess.run(["gzip" , "-"] , stdout = subprocess.PIPE , input = all_new.encode())
                    if(proc.returncode != 0):
                        sys.stderr.write("[ERROR] gzip returned non zero exit code.")
                        sys.exit(1)
                    with open(opath , "wb") as tm:
                        tm.write(proc.stdout)
            else:
                sys.stderr.write("[ERROR] non zero exit code from zcat.\n")
                sys.exit(1)
        else:
            sys.stderr.write("[ERROR] zcat program not found.\n")
            sys.exit(1)


if(__name__ == "__main__"):
    parser = argparse.ArgumentParser(description = """
    Manipulate xoj files created by xournal. 
    Possible actions: 
    parse (parses to Beamer like presentation with sections and subsections;
    1 layer of page 1 - on all slides, 
    2 layer of page 1 - the title, 1 layer of page 2... - section,
    2 layer of page 2... - subsection, 3... layer of page 2... - content),
    simpleparse (parses without sections and subsections;
    all layers on all pages are stacked one on top of another to 
    create a Beamer like presentation),
    copy (copy page specified by first parameter in 
    --parameters after the page specified by the second
    paramtere in --parameters)
    """)
    parser.add_argument("input_file" , help = "Input xoj file.")
    parser.add_argument("output_file" , help = "Output xoj file.")
    parser.add_argument("action" , help = "Action to perform.")
    parser.add_argument("--verbose" , "-v" , help = "Print detailed output." , action = "store_true")
    parser.add_argument("--parameters" , "-p" , nargs = "*" , help = "Additional arguments.")
    args = parser.parse_args()

    data = xoj_data()
    data.verb = args.verbose
    data.parameters = args.parameters
    actions = {"parse" : data.parse_xoj , "copy" : data.copy_xoj , "simpleparse" : data.simpleparse_xoj}
    actions[args.action](args.input_file , args.output_file)
    if(args.parameters != None):
        print(args.parameters)

